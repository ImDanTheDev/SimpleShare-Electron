import { app, BrowserWindow } from 'electron';
import IPC from './ipc';
// This allows TypeScript to pick up the magic constant that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;
declare const STARTUP_WEBPACK_ENTRY: string;
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string;
declare const STARTUP_PRELOAD_WEBPACK_ENTRY: string;

// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require('electron-squirrel-startup')) {
    // eslint-disable-line global-require
    app.quit();
}

let startupWindow: BrowserWindow;
let startupIPC: IPC;

let mainWindow: BrowserWindow;
let mainIPC: IPC;

const createStartupWindow = (): void => {
    startupWindow = new BrowserWindow({
        autoHideMenuBar: true,
        frame: false,
        transparent: true,
        resizable: false,
        webPreferences: {
            contextIsolation: true,
            enableRemoteModule: false,
            preload: STARTUP_PRELOAD_WEBPACK_ENTRY,
        },
        show: false,
    });

    setupStartupIPC();

    startupWindow.loadURL(STARTUP_WEBPACK_ENTRY);
    startupWindow.on('ready-to-show', () => {
        startupWindow.show();
    });
};

const createMainWindow = (): void => {
    mainWindow = new BrowserWindow({
        autoHideMenuBar: true,
        transparent: false,
        frame: false,
        resizable: true,
        webPreferences: {
            contextIsolation: true,
            enableRemoteModule: false,
            preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,
        },
        show: false,
    });

    setupMainIPC();

    mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);
    mainWindow.on('ready-to-show', () => {
        mainWindow.show();
    });
};

const setupStartupIPC = () => {
    startupIPC = new IPC(startupWindow);

    startupIPC.on('APP_QUIT', () => {
        if (!mainWindow?.isDestroyed()) mainWindow.close();
        startupWindow?.close();
    });

    startupIPC.on('APP_CONFIGURE', (args) => {
        if (args.minSize !== undefined)
            startupWindow.setMinimumSize(
                args.minSize.minWidth,
                args.minSize.minHeight
            );
        if (args.maxSize !== undefined)
            startupWindow.setMaximumSize(
                args.maxSize.maxWidth,
                args.maxSize.maxHeight
            );
        if (args.movable !== undefined) startupWindow.setMovable(args.movable);
        if (args.resizable !== undefined)
            startupWindow.setResizable(args.resizable);
    });

    startupIPC.on('APP_RESIZE', (args) => {
        if (args.overrideMinimumSize) {
            startupWindow.setMinimumSize(args.width, args.height);
        }
        startupWindow.setSize(args.width, args.height);
    });

    startupIPC.on('APP_SHOW_MAIN_WINDOW', () => {
        startupIPC.clearListeners();
        startupWindow.close();
        createMainWindow();
    });
};

const setupMainIPC = () => {
    mainIPC = new IPC(mainWindow);

    mainIPC.on('APP_CONFIGURE', (args) => {
        if (args.movable !== undefined) mainWindow.setMovable(args.movable);
        if (args.resizable !== undefined)
            mainWindow.setResizable(args.resizable);
        if (args.minSize !== undefined) {
            mainWindow.setMinimumSize(
                args.minSize.minWidth,
                args.minSize.minHeight
            );
        }
        if (args.maxSize !== undefined)
            mainWindow.setMaximumSize(
                args.maxSize.maxWidth,
                args.maxSize.maxHeight
            );
    });

    mainIPC.on('APP_MOVE', (args) => {
        if (args.center) {
            mainWindow.center();
        } else if (args.x && args.y) {
            mainWindow.setPosition(args.x, args.y, args.animate);
        }
    });

    mainIPC.on('APP_RESIZE', (args) => {
        if (args.overrideMinimumSize) {
            mainWindow.setMinimumSize(args.width, args.height);
        }
        mainWindow.setSize(args.width, args.height);
    });

    mainIPC.on('APP_QUIT', () => {
        if (!startupWindow?.isDestroyed()) startupWindow.close();
        mainWindow?.close();
    });

    mainIPC.on('APP_SHOW_STARTUP_WINDOW', () => {
        mainIPC.clearListeners();
        //startupIPC.clearListeners();
        mainWindow.close();
        //startupWindow.close();
        createStartupWindow();
        //createMainWindow();
    });
};

// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.
app.on('ready', createStartupWindow);

// Quit when all windows are closed, except on macOS. There, it's common
// for applications and their menu bar to stay active until the user quits
// explicitly with Cmd + Q.
app.on('window-all-closed', () => {
    if (process.platform !== 'darwin') {
        app.quit();
    }
});

app.on('activate', () => {
    // On OS X it's common to re-create a window in the app when the
    // dock icon is clicked and there are no other windows open.
    if (BrowserWindow.getAllWindows().length === 0) {
        createStartupWindow();
    }
});

// In this file you can include the rest of your app's specific main process
// code. You can also put them in separate files and import them here.
